<?php
/*
This file is part of Glotzenheft.

Glotzenheft is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Glotzenheft is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * TvSeriesRecommendations200ResponseResultsInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  App\TmdbApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TMDB API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace App\TmdbApi\Model;

use \ArrayAccess;
use \App\TmdbApi\ObjectSerializer;

/**
 * TvSeriesRecommendations200ResponseResultsInner Class Doc Comment
 *
 * @category Class
 * @package  App\TmdbApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TvSeriesRecommendations200ResponseResultsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tv_series_recommendations_200_response_results_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adult' => 'bool',
        'backdrop_path' => 'string',
        'id' => 'int',
        'name' => 'string',
        'original_language' => 'string',
        'original_name' => 'string',
        'overview' => 'string',
        'poster_path' => 'string',
        'media_type' => 'string',
        'genre_ids' => 'int[]',
        'popularity' => 'float',
        'first_air_date' => 'string',
        'vote_average' => 'float',
        'vote_count' => 'int',
        'origin_country' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'adult' => null,
        'backdrop_path' => null,
        'id' => null,
        'name' => null,
        'original_language' => null,
        'original_name' => null,
        'overview' => null,
        'poster_path' => null,
        'media_type' => null,
        'genre_ids' => null,
        'popularity' => null,
        'first_air_date' => null,
        'vote_average' => null,
        'vote_count' => null,
        'origin_country' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'adult' => false,
        'backdrop_path' => false,
        'id' => false,
        'name' => false,
        'original_language' => false,
        'original_name' => false,
        'overview' => false,
        'poster_path' => false,
        'media_type' => false,
        'genre_ids' => false,
        'popularity' => false,
        'first_air_date' => false,
        'vote_average' => false,
        'vote_count' => false,
        'origin_country' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adult' => 'adult',
        'backdrop_path' => 'backdrop_path',
        'id' => 'id',
        'name' => 'name',
        'original_language' => 'original_language',
        'original_name' => 'original_name',
        'overview' => 'overview',
        'poster_path' => 'poster_path',
        'media_type' => 'media_type',
        'genre_ids' => 'genre_ids',
        'popularity' => 'popularity',
        'first_air_date' => 'first_air_date',
        'vote_average' => 'vote_average',
        'vote_count' => 'vote_count',
        'origin_country' => 'origin_country'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adult' => 'setAdult',
        'backdrop_path' => 'setBackdropPath',
        'id' => 'setId',
        'name' => 'setName',
        'original_language' => 'setOriginalLanguage',
        'original_name' => 'setOriginalName',
        'overview' => 'setOverview',
        'poster_path' => 'setPosterPath',
        'media_type' => 'setMediaType',
        'genre_ids' => 'setGenreIds',
        'popularity' => 'setPopularity',
        'first_air_date' => 'setFirstAirDate',
        'vote_average' => 'setVoteAverage',
        'vote_count' => 'setVoteCount',
        'origin_country' => 'setOriginCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adult' => 'getAdult',
        'backdrop_path' => 'getBackdropPath',
        'id' => 'getId',
        'name' => 'getName',
        'original_language' => 'getOriginalLanguage',
        'original_name' => 'getOriginalName',
        'overview' => 'getOverview',
        'poster_path' => 'getPosterPath',
        'media_type' => 'getMediaType',
        'genre_ids' => 'getGenreIds',
        'popularity' => 'getPopularity',
        'first_air_date' => 'getFirstAirDate',
        'vote_average' => 'getVoteAverage',
        'vote_count' => 'getVoteCount',
        'origin_country' => 'getOriginCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('adult', $data ?? [], true);
        $this->setIfExists('backdrop_path', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], 0);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('original_language', $data ?? [], null);
        $this->setIfExists('original_name', $data ?? [], null);
        $this->setIfExists('overview', $data ?? [], null);
        $this->setIfExists('poster_path', $data ?? [], null);
        $this->setIfExists('media_type', $data ?? [], null);
        $this->setIfExists('genre_ids', $data ?? [], null);
        $this->setIfExists('popularity', $data ?? [], 0);
        $this->setIfExists('first_air_date', $data ?? [], null);
        $this->setIfExists('vote_average', $data ?? [], 0);
        $this->setIfExists('vote_count', $data ?? [], 0);
        $this->setIfExists('origin_country', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adult
     *
     * @return bool|null
     */
    public function getAdult()
    {
        return $this->container['adult'];
    }

    /**
     * Sets adult
     *
     * @param bool|null $adult adult
     *
     * @return self
     */
    public function setAdult($adult)
    {
        if (is_null($adult)) {
            throw new \InvalidArgumentException('non-nullable adult cannot be null');
        }
        $this->container['adult'] = $adult;

        return $this;
    }

    /**
     * Gets backdrop_path
     *
     * @return string|null
     */
    public function getBackdropPath()
    {
        return $this->container['backdrop_path'];
    }

    /**
     * Sets backdrop_path
     *
     * @param string|null $backdrop_path backdrop_path
     *
     * @return self
     */
    public function setBackdropPath($backdrop_path)
    {
        if (is_null($backdrop_path)) {
            throw new \InvalidArgumentException('non-nullable backdrop_path cannot be null');
        }
        $this->container['backdrop_path'] = $backdrop_path;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets original_language
     *
     * @return string|null
     */
    public function getOriginalLanguage()
    {
        return $this->container['original_language'];
    }

    /**
     * Sets original_language
     *
     * @param string|null $original_language original_language
     *
     * @return self
     */
    public function setOriginalLanguage($original_language)
    {
        if (is_null($original_language)) {
            throw new \InvalidArgumentException('non-nullable original_language cannot be null');
        }
        $this->container['original_language'] = $original_language;

        return $this;
    }

    /**
     * Gets original_name
     *
     * @return string|null
     */
    public function getOriginalName()
    {
        return $this->container['original_name'];
    }

    /**
     * Sets original_name
     *
     * @param string|null $original_name original_name
     *
     * @return self
     */
    public function setOriginalName($original_name)
    {
        if (is_null($original_name)) {
            throw new \InvalidArgumentException('non-nullable original_name cannot be null');
        }
        $this->container['original_name'] = $original_name;

        return $this;
    }

    /**
     * Gets overview
     *
     * @return string|null
     */
    public function getOverview()
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param string|null $overview overview
     *
     * @return self
     */
    public function setOverview($overview)
    {
        if (is_null($overview)) {
            throw new \InvalidArgumentException('non-nullable overview cannot be null');
        }
        $this->container['overview'] = $overview;

        return $this;
    }

    /**
     * Gets poster_path
     *
     * @return string|null
     */
    public function getPosterPath()
    {
        return $this->container['poster_path'];
    }

    /**
     * Sets poster_path
     *
     * @param string|null $poster_path poster_path
     *
     * @return self
     */
    public function setPosterPath($poster_path)
    {
        if (is_null($poster_path)) {
            throw new \InvalidArgumentException('non-nullable poster_path cannot be null');
        }
        $this->container['poster_path'] = $poster_path;

        return $this;
    }

    /**
     * Gets media_type
     *
     * @return string|null
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     *
     * @param string|null $media_type media_type
     *
     * @return self
     */
    public function setMediaType($media_type)
    {
        if (is_null($media_type)) {
            throw new \InvalidArgumentException('non-nullable media_type cannot be null');
        }
        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets genre_ids
     *
     * @return int[]|null
     */
    public function getGenreIds()
    {
        return $this->container['genre_ids'];
    }

    /**
     * Sets genre_ids
     *
     * @param int[]|null $genre_ids genre_ids
     *
     * @return self
     */
    public function setGenreIds($genre_ids)
    {
        if (is_null($genre_ids)) {
            throw new \InvalidArgumentException('non-nullable genre_ids cannot be null');
        }
        $this->container['genre_ids'] = $genre_ids;

        return $this;
    }

    /**
     * Gets popularity
     *
     * @return float|null
     */
    public function getPopularity()
    {
        return $this->container['popularity'];
    }

    /**
     * Sets popularity
     *
     * @param float|null $popularity popularity
     *
     * @return self
     */
    public function setPopularity($popularity)
    {
        if (is_null($popularity)) {
            throw new \InvalidArgumentException('non-nullable popularity cannot be null');
        }
        $this->container['popularity'] = $popularity;

        return $this;
    }

    /**
     * Gets first_air_date
     *
     * @return string|null
     */
    public function getFirstAirDate()
    {
        return $this->container['first_air_date'];
    }

    /**
     * Sets first_air_date
     *
     * @param string|null $first_air_date first_air_date
     *
     * @return self
     */
    public function setFirstAirDate($first_air_date)
    {
        if (is_null($first_air_date)) {
            throw new \InvalidArgumentException('non-nullable first_air_date cannot be null');
        }
        $this->container['first_air_date'] = $first_air_date;

        return $this;
    }

    /**
     * Gets vote_average
     *
     * @return float|null
     */
    public function getVoteAverage()
    {
        return $this->container['vote_average'];
    }

    /**
     * Sets vote_average
     *
     * @param float|null $vote_average vote_average
     *
     * @return self
     */
    public function setVoteAverage($vote_average)
    {
        if (is_null($vote_average)) {
            throw new \InvalidArgumentException('non-nullable vote_average cannot be null');
        }
        $this->container['vote_average'] = $vote_average;

        return $this;
    }

    /**
     * Gets vote_count
     *
     * @return int|null
     */
    public function getVoteCount()
    {
        return $this->container['vote_count'];
    }

    /**
     * Sets vote_count
     *
     * @param int|null $vote_count vote_count
     *
     * @return self
     */
    public function setVoteCount($vote_count)
    {
        if (is_null($vote_count)) {
            throw new \InvalidArgumentException('non-nullable vote_count cannot be null');
        }
        $this->container['vote_count'] = $vote_count;

        return $this;
    }

    /**
     * Gets origin_country
     *
     * @return string[]|null
     */
    public function getOriginCountry()
    {
        return $this->container['origin_country'];
    }

    /**
     * Sets origin_country
     *
     * @param string[]|null $origin_country origin_country
     *
     * @return self
     */
    public function setOriginCountry($origin_country)
    {
        if (is_null($origin_country)) {
            throw new \InvalidArgumentException('non-nullable origin_country cannot be null');
        }
        $this->container['origin_country'] = $origin_country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


