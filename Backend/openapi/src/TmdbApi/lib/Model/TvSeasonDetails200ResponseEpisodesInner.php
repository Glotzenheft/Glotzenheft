<?php
/**
 * TvSeasonDetails200ResponseEpisodesInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  App\TmdbApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TMDB API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace App\TmdbApi\Model;

use \ArrayAccess;
use \App\TmdbApi\ObjectSerializer;

/**
 * TvSeasonDetails200ResponseEpisodesInner Class Doc Comment
 *
 * @category Class
 * @package  App\TmdbApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TvSeasonDetails200ResponseEpisodesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tv_season_details_200_response_episodes_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'air_date' => 'string',
        'episode_number' => 'int',
        'id' => 'int',
        'name' => 'string',
        'overview' => 'string',
        'production_code' => 'string',
        'runtime' => 'int',
        'season_number' => 'int',
        'show_id' => 'int',
        'still_path' => 'string',
        'vote_average' => 'float',
        'vote_count' => 'int',
        'crew' => '\App\TmdbApi\Model\TvSeasonDetails200ResponseEpisodesInnerCrewInner[]',
        'guest_stars' => '\App\TmdbApi\Model\TvSeasonDetails200ResponseEpisodesInnerGuestStarsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'air_date' => null,
        'episode_number' => null,
        'id' => null,
        'name' => null,
        'overview' => null,
        'production_code' => null,
        'runtime' => null,
        'season_number' => null,
        'show_id' => null,
        'still_path' => null,
        'vote_average' => null,
        'vote_count' => null,
        'crew' => null,
        'guest_stars' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'air_date' => false,
        'episode_number' => false,
        'id' => false,
        'name' => false,
        'overview' => false,
        'production_code' => false,
        'runtime' => false,
        'season_number' => false,
        'show_id' => false,
        'still_path' => false,
        'vote_average' => false,
        'vote_count' => false,
        'crew' => false,
        'guest_stars' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'air_date' => 'air_date',
        'episode_number' => 'episode_number',
        'id' => 'id',
        'name' => 'name',
        'overview' => 'overview',
        'production_code' => 'production_code',
        'runtime' => 'runtime',
        'season_number' => 'season_number',
        'show_id' => 'show_id',
        'still_path' => 'still_path',
        'vote_average' => 'vote_average',
        'vote_count' => 'vote_count',
        'crew' => 'crew',
        'guest_stars' => 'guest_stars'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'air_date' => 'setAirDate',
        'episode_number' => 'setEpisodeNumber',
        'id' => 'setId',
        'name' => 'setName',
        'overview' => 'setOverview',
        'production_code' => 'setProductionCode',
        'runtime' => 'setRuntime',
        'season_number' => 'setSeasonNumber',
        'show_id' => 'setShowId',
        'still_path' => 'setStillPath',
        'vote_average' => 'setVoteAverage',
        'vote_count' => 'setVoteCount',
        'crew' => 'setCrew',
        'guest_stars' => 'setGuestStars'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'air_date' => 'getAirDate',
        'episode_number' => 'getEpisodeNumber',
        'id' => 'getId',
        'name' => 'getName',
        'overview' => 'getOverview',
        'production_code' => 'getProductionCode',
        'runtime' => 'getRuntime',
        'season_number' => 'getSeasonNumber',
        'show_id' => 'getShowId',
        'still_path' => 'getStillPath',
        'vote_average' => 'getVoteAverage',
        'vote_count' => 'getVoteCount',
        'crew' => 'getCrew',
        'guest_stars' => 'getGuestStars'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('air_date', $data ?? [], null);
        $this->setIfExists('episode_number', $data ?? [], 0);
        $this->setIfExists('id', $data ?? [], 0);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('overview', $data ?? [], null);
        $this->setIfExists('production_code', $data ?? [], null);
        $this->setIfExists('runtime', $data ?? [], 0);
        $this->setIfExists('season_number', $data ?? [], 0);
        $this->setIfExists('show_id', $data ?? [], 0);
        $this->setIfExists('still_path', $data ?? [], null);
        $this->setIfExists('vote_average', $data ?? [], 0);
        $this->setIfExists('vote_count', $data ?? [], 0);
        $this->setIfExists('crew', $data ?? [], null);
        $this->setIfExists('guest_stars', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets air_date
     *
     * @return string|null
     */
    public function getAirDate()
    {
        return $this->container['air_date'];
    }

    /**
     * Sets air_date
     *
     * @param string|null $air_date air_date
     *
     * @return self
     */
    public function setAirDate($air_date)
    {
        if (is_null($air_date)) {
            throw new \InvalidArgumentException('non-nullable air_date cannot be null');
        }
        $this->container['air_date'] = $air_date;

        return $this;
    }

    /**
     * Gets episode_number
     *
     * @return int|null
     */
    public function getEpisodeNumber()
    {
        return $this->container['episode_number'];
    }

    /**
     * Sets episode_number
     *
     * @param int|null $episode_number episode_number
     *
     * @return self
     */
    public function setEpisodeNumber($episode_number)
    {
        if (is_null($episode_number)) {
            throw new \InvalidArgumentException('non-nullable episode_number cannot be null');
        }
        $this->container['episode_number'] = $episode_number;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets overview
     *
     * @return string|null
     */
    public function getOverview()
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param string|null $overview overview
     *
     * @return self
     */
    public function setOverview($overview)
    {
        if (is_null($overview)) {
            throw new \InvalidArgumentException('non-nullable overview cannot be null');
        }
        $this->container['overview'] = $overview;

        return $this;
    }

    /**
     * Gets production_code
     *
     * @return string|null
     */
    public function getProductionCode()
    {
        return $this->container['production_code'];
    }

    /**
     * Sets production_code
     *
     * @param string|null $production_code production_code
     *
     * @return self
     */
    public function setProductionCode($production_code)
    {
        if (is_null($production_code)) {
            throw new \InvalidArgumentException('non-nullable production_code cannot be null');
        }
        $this->container['production_code'] = $production_code;

        return $this;
    }

    /**
     * Gets runtime
     *
     * @return int|null
     */
    public function getRuntime()
    {
        return $this->container['runtime'];
    }

    /**
     * Sets runtime
     *
     * @param int|null $runtime runtime
     *
     * @return self
     */
    public function setRuntime($runtime)
    {
        if (is_null($runtime)) {
            throw new \InvalidArgumentException('non-nullable runtime cannot be null');
        }
        $this->container['runtime'] = $runtime;

        return $this;
    }

    /**
     * Gets season_number
     *
     * @return int|null
     */
    public function getSeasonNumber()
    {
        return $this->container['season_number'];
    }

    /**
     * Sets season_number
     *
     * @param int|null $season_number season_number
     *
     * @return self
     */
    public function setSeasonNumber($season_number)
    {
        if (is_null($season_number)) {
            throw new \InvalidArgumentException('non-nullable season_number cannot be null');
        }
        $this->container['season_number'] = $season_number;

        return $this;
    }

    /**
     * Gets show_id
     *
     * @return int|null
     */
    public function getShowId()
    {
        return $this->container['show_id'];
    }

    /**
     * Sets show_id
     *
     * @param int|null $show_id show_id
     *
     * @return self
     */
    public function setShowId($show_id)
    {
        if (is_null($show_id)) {
            throw new \InvalidArgumentException('non-nullable show_id cannot be null');
        }
        $this->container['show_id'] = $show_id;

        return $this;
    }

    /**
     * Gets still_path
     *
     * @return string|null
     */
    public function getStillPath()
    {
        return $this->container['still_path'];
    }

    /**
     * Sets still_path
     *
     * @param string|null $still_path still_path
     *
     * @return self
     */
    public function setStillPath($still_path)
    {
        if (is_null($still_path)) {
            throw new \InvalidArgumentException('non-nullable still_path cannot be null');
        }
        $this->container['still_path'] = $still_path;

        return $this;
    }

    /**
     * Gets vote_average
     *
     * @return float|null
     */
    public function getVoteAverage()
    {
        return $this->container['vote_average'];
    }

    /**
     * Sets vote_average
     *
     * @param float|null $vote_average vote_average
     *
     * @return self
     */
    public function setVoteAverage($vote_average)
    {
        if (is_null($vote_average)) {
            throw new \InvalidArgumentException('non-nullable vote_average cannot be null');
        }
        $this->container['vote_average'] = $vote_average;

        return $this;
    }

    /**
     * Gets vote_count
     *
     * @return int|null
     */
    public function getVoteCount()
    {
        return $this->container['vote_count'];
    }

    /**
     * Sets vote_count
     *
     * @param int|null $vote_count vote_count
     *
     * @return self
     */
    public function setVoteCount($vote_count)
    {
        if (is_null($vote_count)) {
            throw new \InvalidArgumentException('non-nullable vote_count cannot be null');
        }
        $this->container['vote_count'] = $vote_count;

        return $this;
    }

    /**
     * Gets crew
     *
     * @return \App\TmdbApi\Model\TvSeasonDetails200ResponseEpisodesInnerCrewInner[]|null
     */
    public function getCrew()
    {
        return $this->container['crew'];
    }

    /**
     * Sets crew
     *
     * @param \App\TmdbApi\Model\TvSeasonDetails200ResponseEpisodesInnerCrewInner[]|null $crew crew
     *
     * @return self
     */
    public function setCrew($crew)
    {
        if (is_null($crew)) {
            throw new \InvalidArgumentException('non-nullable crew cannot be null');
        }
        $this->container['crew'] = $crew;

        return $this;
    }

    /**
     * Gets guest_stars
     *
     * @return \App\TmdbApi\Model\TvSeasonDetails200ResponseEpisodesInnerGuestStarsInner[]|null
     */
    public function getGuestStars()
    {
        return $this->container['guest_stars'];
    }

    /**
     * Sets guest_stars
     *
     * @param \App\TmdbApi\Model\TvSeasonDetails200ResponseEpisodesInnerGuestStarsInner[]|null $guest_stars guest_stars
     *
     * @return self
     */
    public function setGuestStars($guest_stars)
    {
        if (is_null($guest_stars)) {
            throw new \InvalidArgumentException('non-nullable guest_stars cannot be null');
        }
        $this->container['guest_stars'] = $guest_stars;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


