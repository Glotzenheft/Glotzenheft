<?php

/*
This file is part of Glotzenheft.

Glotzenheft is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Glotzenheft is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

declare(strict_types=1);

/**
 * TvSeriesDetails200Response
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  App\TmdbApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TMDB API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace App\TmdbApi\Model;

use \ArrayAccess;
use \App\TmdbApi\ObjectSerializer;
use InvalidArgumentException;

/**
 * TvSeriesDetails200Response Class Doc Comment
 *
 * @category Class
 * @package  App\TmdbApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TvSeriesDetails200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const null DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'tv_series_details_200_response';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'adult' => 'bool',
        'backdrop_path' => 'string',
        'created_by' => '\App\TmdbApi\Model\TvSeriesDetails200ResponseCreatedByInner[]',
        'episode_run_time' => 'int[]',
        'first_air_date' => 'string',
        'genres' => '\App\TmdbApi\Model\TvSeriesDetails200ResponseGenresInner[]',
        'homepage' => 'string',
        'id' => 'int',
        'in_production' => 'bool',
        'languages' => 'string[]',
        'last_air_date' => 'string',
        'last_episode_to_air' => '\App\TmdbApi\Model\TvSeriesDetails200ResponseLastEpisodeToAir',
        'name' => 'string',
        'next_episode_to_air' => 'mixed',
        'networks' => '\App\TmdbApi\Model\TvSeriesDetails200ResponseNetworksInner[]',
        'number_of_episodes' => 'int',
        'number_of_seasons' => 'int',
        'origin_country' => 'string[]',
        'original_language' => 'string',
        'original_name' => 'string',
        'overview' => 'string',
        'popularity' => 'float',
        'poster_path' => 'string',
        'production_companies' => '\App\TmdbApi\Model\TvSeriesDetails200ResponseProductionCompaniesInner[]',
        'production_countries' => '\App\TmdbApi\Model\TvSeriesDetails200ResponseProductionCountriesInner[]',
        'seasons' => '\App\TmdbApi\Model\TvSeriesDetails200ResponseSeasonsInner[]',
        'spoken_languages' => '\App\TmdbApi\Model\MovieDetails200ResponseSpokenLanguagesInner[]',
        'status' => 'string',
        'tagline' => 'string',
        'type' => 'string',
        'vote_average' => 'float',
        'vote_count' => 'int',
        'external_ids' => '\App\TmdbApi\Model\TvSeriesDetails200ResponseExternalIds'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'adult' => null,
        'backdrop_path' => null,
        'created_by' => null,
        'episode_run_time' => null,
        'first_air_date' => null,
        'genres' => null,
        'homepage' => null,
        'id' => null,
        'in_production' => null,
        'languages' => null,
        'last_air_date' => null,
        'last_episode_to_air' => null,
        'name' => null,
        'next_episode_to_air' => null,
        'networks' => null,
        'number_of_episodes' => null,
        'number_of_seasons' => null,
        'origin_country' => null,
        'original_language' => null,
        'original_name' => null,
        'overview' => null,
        'popularity' => null,
        'poster_path' => null,
        'production_companies' => null,
        'production_countries' => null,
        'seasons' => null,
        'spoken_languages' => null,
        'status' => null,
        'tagline' => null,
        'type' => null,
        'vote_average' => null,
        'vote_count' => null,
        'external_ids' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        'adult' => false,
        'backdrop_path' => false,
        'created_by' => false,
        'episode_run_time' => false,
        'first_air_date' => false,
        'genres' => false,
        'homepage' => false,
        'id' => false,
        'in_production' => false,
        'languages' => false,
        'last_air_date' => false,
        'last_episode_to_air' => false,
        'name' => false,
        'next_episode_to_air' => true,
        'networks' => false,
        'number_of_episodes' => false,
        'number_of_seasons' => false,
        'origin_country' => false,
        'original_language' => false,
        'original_name' => false,
        'overview' => false,
        'popularity' => false,
        'poster_path' => false,
        'production_companies' => false,
        'production_countries' => false,
        'seasons' => false,
        'spoken_languages' => false,
        'status' => false,
        'tagline' => false,
        'type' => false,
        'vote_average' => false,
        'vote_count' => false,
        'external_ids' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'adult' => 'adult',
        'backdrop_path' => 'backdrop_path',
        'created_by' => 'created_by',
        'episode_run_time' => 'episode_run_time',
        'first_air_date' => 'first_air_date',
        'genres' => 'genres',
        'homepage' => 'homepage',
        'id' => 'id',
        'in_production' => 'in_production',
        'languages' => 'languages',
        'last_air_date' => 'last_air_date',
        'last_episode_to_air' => 'last_episode_to_air',
        'name' => 'name',
        'next_episode_to_air' => 'next_episode_to_air',
        'networks' => 'networks',
        'number_of_episodes' => 'number_of_episodes',
        'number_of_seasons' => 'number_of_seasons',
        'origin_country' => 'origin_country',
        'original_language' => 'original_language',
        'original_name' => 'original_name',
        'overview' => 'overview',
        'popularity' => 'popularity',
        'poster_path' => 'poster_path',
        'production_companies' => 'production_companies',
        'production_countries' => 'production_countries',
        'seasons' => 'seasons',
        'spoken_languages' => 'spoken_languages',
        'status' => 'status',
        'tagline' => 'tagline',
        'type' => 'type',
        'vote_average' => 'vote_average',
        'vote_count' => 'vote_count',
        'external_ids' => 'external_ids',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'adult' => 'setAdult',
        'backdrop_path' => 'setBackdropPath',
        'created_by' => 'setCreatedBy',
        'episode_run_time' => 'setEpisodeRunTime',
        'first_air_date' => 'setFirstAirDate',
        'genres' => 'setGenres',
        'homepage' => 'setHomepage',
        'id' => 'setId',
        'in_production' => 'setInProduction',
        'languages' => 'setLanguages',
        'last_air_date' => 'setLastAirDate',
        'last_episode_to_air' => 'setLastEpisodeToAir',
        'name' => 'setName',
        'next_episode_to_air' => 'setNextEpisodeToAir',
        'networks' => 'setNetworks',
        'number_of_episodes' => 'setNumberOfEpisodes',
        'number_of_seasons' => 'setNumberOfSeasons',
        'origin_country' => 'setOriginCountry',
        'original_language' => 'setOriginalLanguage',
        'original_name' => 'setOriginalName',
        'overview' => 'setOverview',
        'popularity' => 'setPopularity',
        'poster_path' => 'setPosterPath',
        'production_companies' => 'setProductionCompanies',
        'production_countries' => 'setProductionCountries',
        'seasons' => 'setSeasons',
        'spoken_languages' => 'setSpokenLanguages',
        'status' => 'setStatus',
        'tagline' => 'setTagline',
        'type' => 'setType',
        'vote_average' => 'setVoteAverage',
        'vote_count' => 'setVoteCount',
        'external_ids' => 'setExternalIds',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'adult' => 'getAdult',
        'backdrop_path' => 'getBackdropPath',
        'created_by' => 'getCreatedBy',
        'episode_run_time' => 'getEpisodeRunTime',
        'first_air_date' => 'getFirstAirDate',
        'genres' => 'getGenres',
        'homepage' => 'getHomepage',
        'id' => 'getId',
        'in_production' => 'getInProduction',
        'languages' => 'getLanguages',
        'last_air_date' => 'getLastAirDate',
        'last_episode_to_air' => 'getLastEpisodeToAir',
        'name' => 'getName',
        'next_episode_to_air' => 'getNextEpisodeToAir',
        'networks' => 'getNetworks',
        'number_of_episodes' => 'getNumberOfEpisodes',
        'number_of_seasons' => 'getNumberOfSeasons',
        'origin_country' => 'getOriginCountry',
        'original_language' => 'getOriginalLanguage',
        'original_name' => 'getOriginalName',
        'overview' => 'getOverview',
        'popularity' => 'getPopularity',
        'poster_path' => 'getPosterPath',
        'production_companies' => 'getProductionCompanies',
        'production_countries' => 'getProductionCountries',
        'seasons' => 'getSeasons',
        'spoken_languages' => 'getSpokenLanguages',
        'status' => 'getStatus',
        'tagline' => 'getTagline',
        'type' => 'getType',
        'vote_average' => 'getVoteAverage',
        'vote_count' => 'getVoteCount',
        'external_ids' => 'getExternalIds',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('adult', $data ?? [], true);
        $this->setIfExists('backdrop_path', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('episode_run_time', $data ?? [], null);
        $this->setIfExists('first_air_date', $data ?? [], null);
        $this->setIfExists('genres', $data ?? [], null);
        $this->setIfExists('homepage', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], 0);
        $this->setIfExists('in_production', $data ?? [], true);
        $this->setIfExists('languages', $data ?? [], null);
        $this->setIfExists('last_air_date', $data ?? [], null);
        $this->setIfExists('last_episode_to_air', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('next_episode_to_air', $data ?? [], null);
        $this->setIfExists('networks', $data ?? [], null);
        $this->setIfExists('number_of_episodes', $data ?? [], 0);
        $this->setIfExists('number_of_seasons', $data ?? [], 0);
        $this->setIfExists('origin_country', $data ?? [], null);
        $this->setIfExists('original_language', $data ?? [], null);
        $this->setIfExists('original_name', $data ?? [], null);
        $this->setIfExists('overview', $data ?? [], null);
        $this->setIfExists('popularity', $data ?? [], 0);
        $this->setIfExists('poster_path', $data ?? [], null);
        $this->setIfExists('production_companies', $data ?? [], null);
        $this->setIfExists('production_countries', $data ?? [], null);
        $this->setIfExists('seasons', $data ?? [], null);
        $this->setIfExists('spoken_languages', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('tagline', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('vote_average', $data ?? [], 0);
        $this->setIfExists('vote_count', $data ?? [], 0);
        $this->setIfExists('external_ids', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array $fields
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName)
            && array_key_exists($variableName, $fields)
            && is_null($fields[$variableName])
        )
        {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adult
     *
     * @return bool|null
     */
    public function getAdult(): ?bool
    {
        return $this->container['adult'];
    }

    /**
     * Sets adult
     *
     * @param bool|null $adult adult
     *
     * @return self
     */
    public function setAdult(?bool $adult): static
    {
        if (is_null($adult))
        {
            throw new InvalidArgumentException('non-nullable adult cannot be null');
        }
        $this->container['adult'] = $adult;

        return $this;
    }

    /**
     * Gets backdrop_path
     *
     * @return string|null
     */
    public function getBackdropPath(): ?string
    {
        return $this->container['backdrop_path'];
    }

    /**
     * Sets backdrop_path
     *
     * @param string|null $backdrop_path backdrop_path
     *
     * @return self
     */
    public function setBackdropPath(?string $backdrop_path): static
    {
        if (is_null($backdrop_path))
        {
            throw new InvalidArgumentException('non-nullable backdrop_path cannot be null');
        }
        $this->container['backdrop_path'] = $backdrop_path;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return TvSeriesDetails200ResponseCreatedByInner[]|null
     */
    public function getCreatedBy(): ?array
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param TvSeriesDetails200ResponseCreatedByInner[]|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy(?array $created_by): static
    {
        if (is_null($created_by))
        {
            throw new InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets episode_run_time
     *
     * @return int[]|null
     */
    public function getEpisodeRunTime(): ?array
    {
        return $this->container['episode_run_time'];
    }

    /**
     * Sets episode_run_time
     *
     * @param int[]|null $episode_run_time episode_run_time
     *
     * @return self
     */
    public function setEpisodeRunTime(?array $episode_run_time): static
    {
        if (is_null($episode_run_time))
        {
            throw new InvalidArgumentException('non-nullable episode_run_time cannot be null');
        }
        $this->container['episode_run_time'] = $episode_run_time;

        return $this;
    }

    /**
     * Gets first_air_date
     *
     * @return string|null
     */
    public function getFirstAirDate(): ?string
    {
        return $this->container['first_air_date'];
    }

    /**
     * Sets first_air_date
     *
     * @param string|null $first_air_date first_air_date
     *
     * @return self
     */
    public function setFirstAirDate(?string $first_air_date): static
    {
        if (is_null($first_air_date))
        {
            throw new InvalidArgumentException('non-nullable first_air_date cannot be null');
        }
        $this->container['first_air_date'] = $first_air_date;

        return $this;
    }

    /**
     * Gets genres
     *
     * @return TvSeriesDetails200ResponseGenresInner[]|null
     */
    public function getGenres(): ?array
    {
        return $this->container['genres'];
    }

    /**
     * Sets genres
     *
     * @param TvSeriesDetails200ResponseGenresInner[]|null $genres genres
     *
     * @return self
     */
    public function setGenres(?array $genres): static
    {
        if (is_null($genres))
        {
            throw new InvalidArgumentException('non-nullable genres cannot be null');
        }
        $this->container['genres'] = $genres;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return string|null
     */
    public function getHomepage(): ?string
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param string|null $homepage homepage
     *
     * @return self
     */
    public function setHomepage(?string $homepage): static
    {
        if (is_null($homepage))
        {
            throw new InvalidArgumentException('non-nullable homepage cannot be null');
        }
        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId(?int $id): static
    {
        if (is_null($id))
        {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets in_production
     *
     * @return bool|null
     */
    public function getInProduction(): ?bool
    {
        return $this->container['in_production'];
    }

    /**
     * Sets in_production
     *
     * @param bool|null $in_production in_production
     *
     * @return self
     */
    public function setInProduction(?bool $in_production): static
    {
        if (is_null($in_production))
        {
            throw new InvalidArgumentException('non-nullable in_production cannot be null');
        }
        $this->container['in_production'] = $in_production;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string[]|null
     */
    public function getLanguages(): ?array
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string[]|null $languages languages
     *
     * @return self
     */
    public function setLanguages(?array $languages): static
    {
        if (is_null($languages))
        {
            throw new InvalidArgumentException('non-nullable languages cannot be null');
        }
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets last_air_date
     *
     * @return string|null
     */
    public function getLastAirDate(): ?string
    {
        return $this->container['last_air_date'];
    }

    /**
     * Sets last_air_date
     *
     * @param string|null $last_air_date last_air_date
     *
     * @return self
     */
    public function setLastAirDate(?string $last_air_date): static
    {
        if (is_null($last_air_date))
        {
            throw new InvalidArgumentException('non-nullable last_air_date cannot be null');
        }
        $this->container['last_air_date'] = $last_air_date;

        return $this;
    }

    /**
     * Gets last_episode_to_air
     *
     * @return TvSeriesDetails200ResponseLastEpisodeToAir|null
     */
    public function getLastEpisodeToAir(): ?TvSeriesDetails200ResponseLastEpisodeToAir
    {
        return $this->container['last_episode_to_air'];
    }

    /**
     * Sets last_episode_to_air
     *
     * @param TvSeriesDetails200ResponseLastEpisodeToAir|null $last_episode_to_air last_episode_to_air
     *
     * @return self
     */
    public function setLastEpisodeToAir(?TvSeriesDetails200ResponseLastEpisodeToAir $last_episode_to_air): static
    {
        if (is_null($last_episode_to_air))
        {
            throw new InvalidArgumentException('non-nullable last_episode_to_air cannot be null');
        }
        $this->container['last_episode_to_air'] = $last_episode_to_air;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName(?string $name): static
    {
        if (is_null($name))
        {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets next_episode_to_air
     *
     * @return mixed|null
     */
    public function getNextEpisodeToAir(): mixed
    {
        return $this->container['next_episode_to_air'];
    }

    /**
     * Sets next_episode_to_air
     *
     * @param mixed|null $next_episode_to_air next_episode_to_air
     *
     * @return self
     */
    public function setNextEpisodeToAir(mixed $next_episode_to_air): static
    {
        if (is_null($next_episode_to_air))
        {
            $this->openAPINullablesSetToNull[] = 'next_episode_to_air';
        }
        else
        {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next_episode_to_air', $nullablesSetToNull);
            if ($index !== FALSE)
            {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['next_episode_to_air'] = $next_episode_to_air;

        return $this;
    }

    /**
     * Gets networks
     *
     * @return TvSeriesDetails200ResponseNetworksInner[]|null
     */
    public function getNetworks(): ?array
    {
        return $this->container['networks'];
    }

    /**
     * Sets networks
     *
     * @param TvSeriesDetails200ResponseNetworksInner[]|null $networks networks
     *
     * @return self
     */
    public function setNetworks(?array $networks): static
    {
        if (is_null($networks))
        {
            throw new InvalidArgumentException('non-nullable networks cannot be null');
        }
        $this->container['networks'] = $networks;

        return $this;
    }

    /**
     * Gets number_of_episodes
     *
     * @return int|null
     */
    public function getNumberOfEpisodes(): ?int
    {
        return $this->container['number_of_episodes'];
    }

    /**
     * Sets number_of_episodes
     *
     * @param int|null $number_of_episodes number_of_episodes
     *
     * @return self
     */
    public function setNumberOfEpisodes($number_of_episodes): static
    {
        if (is_null($number_of_episodes))
        {
            throw new InvalidArgumentException('non-nullable number_of_episodes cannot be null');
        }
        $this->container['number_of_episodes'] = $number_of_episodes;

        return $this;
    }

    /**
     * Gets number_of_seasons
     *
     * @return int|null
     */
    public function getNumberOfSeasons(): ?int
    {
        return $this->container['number_of_seasons'];
    }

    /**
     * Sets number_of_seasons
     *
     * @param int|null $number_of_seasons number_of_seasons
     *
     * @return self
     */
    public function setNumberOfSeasons(?int $number_of_seasons): static
    {
        if (is_null($number_of_seasons))
        {
            throw new InvalidArgumentException('non-nullable number_of_seasons cannot be null');
        }
        $this->container['number_of_seasons'] = $number_of_seasons;

        return $this;
    }

    /**
     * Gets origin_country
     *
     * @return string[]|null
     */
    public function getOriginCountry(): ?array
    {
        return $this->container['origin_country'];
    }

    /**
     * Sets origin_country
     *
     * @param string[]|null $origin_country origin_country
     *
     * @return self
     */
    public function setOriginCountry(?array $origin_country): static
    {
        if (is_null($origin_country))
        {
            throw new InvalidArgumentException('non-nullable origin_country cannot be null');
        }
        $this->container['origin_country'] = $origin_country;

        return $this;
    }

    /**
     * Gets original_language
     *
     * @return string|null
     */
    public function getOriginalLanguage(): ?string
    {
        return $this->container['original_language'];
    }

    /**
     * Sets original_language
     *
     * @param string|null $original_language original_language
     *
     * @return self
     */
    public function setOriginalLanguage(?string $original_language): static
    {
        if (is_null($original_language))
        {
            throw new InvalidArgumentException('non-nullable original_language cannot be null');
        }
        $this->container['original_language'] = $original_language;

        return $this;
    }

    /**
     * Gets original_name
     *
     * @return string|null
     */
    public function getOriginalName(): ?string
    {
        return $this->container['original_name'];
    }

    /**
     * Sets original_name
     *
     * @param string|null $original_name original_name
     *
     * @return self
     */
    public function setOriginalName(?string $original_name): static
    {
        if (is_null($original_name))
        {
            throw new InvalidArgumentException('non-nullable original_name cannot be null');
        }
        $this->container['original_name'] = $original_name;

        return $this;
    }

    /**
     * Gets overview
     *
     * @return string|null
     */
    public function getOverview(): ?string
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param string|null $overview overview
     *
     * @return self
     */
    public function setOverview(?string $overview): static
    {
        if (is_null($overview))
        {
            throw new InvalidArgumentException('non-nullable overview cannot be null');
        }
        $this->container['overview'] = $overview;

        return $this;
    }

    /**
     * Gets popularity
     *
     * @return float|null
     */
    public function getPopularity(): ?float
    {
        return $this->container['popularity'];
    }

    /**
     * Sets popularity
     *
     * @param float|null $popularity popularity
     *
     * @return self
     */
    public function setPopularity(?float $popularity): static
    {
        if (is_null($popularity))
        {
            throw new InvalidArgumentException('non-nullable popularity cannot be null');
        }
        $this->container['popularity'] = $popularity;

        return $this;
    }

    /**
     * Gets poster_path
     *
     * @return string|null
     */
    public function getPosterPath(): ?string
    {
        return $this->container['poster_path'];
    }

    /**
     * Sets poster_path
     *
     * @param string|null $poster_path poster_path
     *
     * @return self
     */
    public function setPosterPath(?string $poster_path): static
    {
        if (is_null($poster_path))
        {
            throw new InvalidArgumentException('non-nullable poster_path cannot be null');
        }
        $this->container['poster_path'] = $poster_path;

        return $this;
    }

    /**
     * Gets production_companies
     *
     * @return TvSeriesDetails200ResponseProductionCompaniesInner[]|null
     */
    public function getProductionCompanies(): ?array
    {
        return $this->container['production_companies'];
    }

    /**
     * Sets production_companies
     *
     * @param TvSeriesDetails200ResponseProductionCompaniesInner[]|null $production_companies production_companies
     *
     * @return self
     */
    public function setProductionCompanies($production_companies): static
    {
        if (is_null($production_companies))
        {
            throw new InvalidArgumentException('non-nullable production_companies cannot be null');
        }
        $this->container['production_companies'] = $production_companies;

        return $this;
    }

    /**
     * Gets production_countries
     *
     * @return TvSeriesDetails200ResponseProductionCountriesInner[]|null
     */
    public function getProductionCountries(): ?array
    {
        return $this->container['production_countries'];
    }

    /**
     * Sets production_countries
     *
     * @param TvSeriesDetails200ResponseProductionCountriesInner[]|null $production_countries production_countries
     *
     * @return self
     */
    public function setProductionCountries(?array $production_countries): static
    {
        if (is_null($production_countries))
        {
            throw new InvalidArgumentException('non-nullable production_countries cannot be null');
        }
        $this->container['production_countries'] = $production_countries;

        return $this;
    }

    /**
     * Gets seasons
     *
     * @return TvSeriesDetails200ResponseSeasonsInner[]|null
     */
    public function getSeasons(): ?array
    {
        return $this->container['seasons'];
    }

    /**
     * Sets seasons
     *
     * @param TvSeriesDetails200ResponseSeasonsInner[]|null $seasons seasons
     *
     * @return self
     */
    public function setSeasons(?array $seasons): static
    {
        if (is_null($seasons))
        {
            throw new InvalidArgumentException('non-nullable seasons cannot be null');
        }
        $this->container['seasons'] = $seasons;

        return $this;
    }

    /**
     * Gets spoken_languages
     *
     * @return MovieDetails200ResponseSpokenLanguagesInner[]|null
     */
    public function getSpokenLanguages(): ?array
    {
        return $this->container['spoken_languages'];
    }

    /**
     * Sets spoken_languages
     *
     * @param MovieDetails200ResponseSpokenLanguagesInner[]|null $spoken_languages spoken_languages
     *
     * @return self
     */
    public function setSpokenLanguages($spoken_languages): static
    {
        if (is_null($spoken_languages))
        {
            throw new InvalidArgumentException('non-nullable spoken_languages cannot be null');
        }
        $this->container['spoken_languages'] = $spoken_languages;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus(?string $status): static
    {
        if (is_null($status))
        {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tagline
     *
     * @return string|null
     */
    public function getTagline(): ?string
    {
        return $this->container['tagline'];
    }

    /**
     * Sets tagline
     *
     * @param string|null $tagline tagline
     *
     * @return self
     */
    public function setTagline(?string $tagline): static
    {
        if (is_null($tagline))
        {
            throw new InvalidArgumentException('non-nullable tagline cannot be null');
        }
        $this->container['tagline'] = $tagline;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType(?string $type): static
    {
        if (is_null($type))
        {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets vote_average
     *
     * @return float|null
     */
    public function getVoteAverage(): ?float
    {
        return $this->container['vote_average'];
    }

    /**
     * Sets vote_average
     *
     * @param float|null $vote_average vote_average
     *
     * @return self
     */
    public function setVoteAverage(?float $vote_average): static
    {
        if (is_null($vote_average))
        {
            throw new InvalidArgumentException('non-nullable vote_average cannot be null');
        }
        $this->container['vote_average'] = $vote_average;

        return $this;
    }

    /**
     * Gets vote_count
     *
     * @return int|null
     */
    public function getVoteCount(): ?int
    {
        return $this->container['vote_count'];
    }

    /**
     * Sets vote_count
     *
     * @param int|null $vote_count vote_count
     *
     * @return self
     */
    public function setVoteCount(?int $vote_count): static
    {
        if (is_null($vote_count))
        {
            throw new InvalidArgumentException('non-nullable vote_count cannot be null');
        }
        $this->container['vote_count'] = $vote_count;

        return $this;
    }

    /**
     * Gets external_ids
     *
     * @return TvSeriesDetails200ResponseExternalIds|null
     */
    public function getExternalIds(): ?TvSeriesDetails200ResponseExternalIds
    {
        return $this->container['external_ids'];
    }

    /**
     * Sets external_ids
     *
     * @param TvSeriesDetails200ResponseExternalIds|null $external_ids
     *
     * @return self
     */
    public function setExternalIds(?TvSeriesDetails200ResponseExternalIds $external_ids): static
    {
        if (is_null($external_ids))
        {
            $this->openAPINullablesSetToNull[] = 'external_ids';
        }
        else
        {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_ids', $nullablesSetToNull);
            if ($index !== FALSE)
            {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_ids'] = $external_ids;

        return $this;
    }

    /**
     * Convenience method to get imdb_id directly.
     *
     * @return string|null
     */
    public function getImdbId(): ?string
    {
        return $this->container['external_ids']?->getImdbId();
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset))
        {
            $this->container[] = $value;
        }
        else
        {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


