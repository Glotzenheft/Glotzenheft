<?php
/*
This file is part of Glotzenheft.

Glotzenheft is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Glotzenheft is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * MovieDetails200Response
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  App\TmdbApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TMDB API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace App\TmdbApi\Model;

use \ArrayAccess;
use \App\TmdbApi\ObjectSerializer;

/**
 * MovieDetails200Response Class Doc Comment
 *
 * @category Class
 * @package  App\TmdbApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MovieDetails200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'movie_details_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adult' => 'bool',
        'backdrop_path' => 'string',
        'belongs_to_collection' => 'mixed',
        'budget' => 'int',
        'genres' => '\App\TmdbApi\Model\MovieDetails200ResponseGenresInner[]',
        'homepage' => 'string',
        'id' => 'int',
        'imdb_id' => 'string',
        'original_language' => 'string',
        'original_title' => 'string',
        'overview' => 'string',
        'popularity' => 'float',
        'poster_path' => 'string',
        'production_companies' => '\App\TmdbApi\Model\MovieDetails200ResponseProductionCompaniesInner[]',
        'production_countries' => '\App\TmdbApi\Model\MovieDetails200ResponseProductionCountriesInner[]',
        'release_date' => 'string',
        'revenue' => 'int',
        'runtime' => 'int',
        'spoken_languages' => '\App\TmdbApi\Model\MovieDetails200ResponseSpokenLanguagesInner[]',
        'status' => 'string',
        'tagline' => 'string',
        'title' => 'string',
        'video' => 'bool',
        'vote_average' => 'float',
        'vote_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'adult' => null,
        'backdrop_path' => null,
        'belongs_to_collection' => null,
        'budget' => null,
        'genres' => null,
        'homepage' => null,
        'id' => null,
        'imdb_id' => null,
        'original_language' => null,
        'original_title' => null,
        'overview' => null,
        'popularity' => null,
        'poster_path' => null,
        'production_companies' => null,
        'production_countries' => null,
        'release_date' => null,
        'revenue' => null,
        'runtime' => null,
        'spoken_languages' => null,
        'status' => null,
        'tagline' => null,
        'title' => null,
        'video' => null,
        'vote_average' => null,
        'vote_count' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'adult' => false,
        'backdrop_path' => false,
        'belongs_to_collection' => true,
        'budget' => false,
        'genres' => false,
        'homepage' => false,
        'id' => false,
        'imdb_id' => false,
        'original_language' => false,
        'original_title' => false,
        'overview' => false,
        'popularity' => false,
        'poster_path' => false,
        'production_companies' => false,
        'production_countries' => false,
        'release_date' => false,
        'revenue' => false,
        'runtime' => false,
        'spoken_languages' => false,
        'status' => false,
        'tagline' => false,
        'title' => false,
        'video' => false,
        'vote_average' => false,
        'vote_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adult' => 'adult',
        'backdrop_path' => 'backdrop_path',
        'belongs_to_collection' => 'belongs_to_collection',
        'budget' => 'budget',
        'genres' => 'genres',
        'homepage' => 'homepage',
        'id' => 'id',
        'imdb_id' => 'imdb_id',
        'original_language' => 'original_language',
        'original_title' => 'original_title',
        'overview' => 'overview',
        'popularity' => 'popularity',
        'poster_path' => 'poster_path',
        'production_companies' => 'production_companies',
        'production_countries' => 'production_countries',
        'release_date' => 'release_date',
        'revenue' => 'revenue',
        'runtime' => 'runtime',
        'spoken_languages' => 'spoken_languages',
        'status' => 'status',
        'tagline' => 'tagline',
        'title' => 'title',
        'video' => 'video',
        'vote_average' => 'vote_average',
        'vote_count' => 'vote_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adult' => 'setAdult',
        'backdrop_path' => 'setBackdropPath',
        'belongs_to_collection' => 'setBelongsToCollection',
        'budget' => 'setBudget',
        'genres' => 'setGenres',
        'homepage' => 'setHomepage',
        'id' => 'setId',
        'imdb_id' => 'setImdbId',
        'original_language' => 'setOriginalLanguage',
        'original_title' => 'setOriginalTitle',
        'overview' => 'setOverview',
        'popularity' => 'setPopularity',
        'poster_path' => 'setPosterPath',
        'production_companies' => 'setProductionCompanies',
        'production_countries' => 'setProductionCountries',
        'release_date' => 'setReleaseDate',
        'revenue' => 'setRevenue',
        'runtime' => 'setRuntime',
        'spoken_languages' => 'setSpokenLanguages',
        'status' => 'setStatus',
        'tagline' => 'setTagline',
        'title' => 'setTitle',
        'video' => 'setVideo',
        'vote_average' => 'setVoteAverage',
        'vote_count' => 'setVoteCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adult' => 'getAdult',
        'backdrop_path' => 'getBackdropPath',
        'belongs_to_collection' => 'getBelongsToCollection',
        'budget' => 'getBudget',
        'genres' => 'getGenres',
        'homepage' => 'getHomepage',
        'id' => 'getId',
        'imdb_id' => 'getImdbId',
        'original_language' => 'getOriginalLanguage',
        'original_title' => 'getOriginalTitle',
        'overview' => 'getOverview',
        'popularity' => 'getPopularity',
        'poster_path' => 'getPosterPath',
        'production_companies' => 'getProductionCompanies',
        'production_countries' => 'getProductionCountries',
        'release_date' => 'getReleaseDate',
        'revenue' => 'getRevenue',
        'runtime' => 'getRuntime',
        'spoken_languages' => 'getSpokenLanguages',
        'status' => 'getStatus',
        'tagline' => 'getTagline',
        'title' => 'getTitle',
        'video' => 'getVideo',
        'vote_average' => 'getVoteAverage',
        'vote_count' => 'getVoteCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('adult', $data ?? [], true);
        $this->setIfExists('backdrop_path', $data ?? [], null);
        $this->setIfExists('belongs_to_collection', $data ?? [], null);
        $this->setIfExists('budget', $data ?? [], 0);
        $this->setIfExists('genres', $data ?? [], null);
        $this->setIfExists('homepage', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], 0);
        $this->setIfExists('imdb_id', $data ?? [], null);
        $this->setIfExists('original_language', $data ?? [], null);
        $this->setIfExists('original_title', $data ?? [], null);
        $this->setIfExists('overview', $data ?? [], null);
        $this->setIfExists('popularity', $data ?? [], 0);
        $this->setIfExists('poster_path', $data ?? [], null);
        $this->setIfExists('production_companies', $data ?? [], null);
        $this->setIfExists('production_countries', $data ?? [], null);
        $this->setIfExists('release_date', $data ?? [], null);
        $this->setIfExists('revenue', $data ?? [], 0);
        $this->setIfExists('runtime', $data ?? [], 0);
        $this->setIfExists('spoken_languages', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('tagline', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('video', $data ?? [], true);
        $this->setIfExists('vote_average', $data ?? [], 0);
        $this->setIfExists('vote_count', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adult
     *
     * @return bool|null
     */
    public function getAdult()
    {
        return $this->container['adult'];
    }

    /**
     * Sets adult
     *
     * @param bool|null $adult adult
     *
     * @return self
     */
    public function setAdult($adult)
    {
        if (is_null($adult)) {
            throw new \InvalidArgumentException('non-nullable adult cannot be null');
        }
        $this->container['adult'] = $adult;

        return $this;
    }

    /**
     * Gets backdrop_path
     *
     * @return string|null
     */
    public function getBackdropPath()
    {
        return $this->container['backdrop_path'];
    }

    /**
     * Sets backdrop_path
     *
     * @param string|null $backdrop_path backdrop_path
     *
     * @return self
     */
    public function setBackdropPath($backdrop_path)
    {
        if (is_null($backdrop_path)) {
            throw new \InvalidArgumentException('non-nullable backdrop_path cannot be null');
        }
        $this->container['backdrop_path'] = $backdrop_path;

        return $this;
    }

    /**
     * Gets belongs_to_collection
     *
     * @return mixed|null
     */
    public function getBelongsToCollection()
    {
        return $this->container['belongs_to_collection'];
    }

    /**
     * Sets belongs_to_collection
     *
     * @param mixed|null $belongs_to_collection belongs_to_collection
     *
     * @return self
     */
    public function setBelongsToCollection($belongs_to_collection)
    {
        if (is_null($belongs_to_collection)) {
            array_push($this->openAPINullablesSetToNull, 'belongs_to_collection');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('belongs_to_collection', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['belongs_to_collection'] = $belongs_to_collection;

        return $this;
    }

    /**
     * Gets budget
     *
     * @return int|null
     */
    public function getBudget()
    {
        return $this->container['budget'];
    }

    /**
     * Sets budget
     *
     * @param int|null $budget budget
     *
     * @return self
     */
    public function setBudget($budget)
    {
        if (is_null($budget)) {
            throw new \InvalidArgumentException('non-nullable budget cannot be null');
        }
        $this->container['budget'] = $budget;

        return $this;
    }

    /**
     * Gets genres
     *
     * @return \App\TmdbApi\Model\MovieDetails200ResponseGenresInner[]|null
     */
    public function getGenres()
    {
        return $this->container['genres'];
    }

    /**
     * Sets genres
     *
     * @param \App\TmdbApi\Model\MovieDetails200ResponseGenresInner[]|null $genres genres
     *
     * @return self
     */
    public function setGenres($genres)
    {
        if (is_null($genres)) {
            throw new \InvalidArgumentException('non-nullable genres cannot be null');
        }
        $this->container['genres'] = $genres;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return string|null
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param string|null $homepage homepage
     *
     * @return self
     */
    public function setHomepage($homepage)
    {
        if (is_null($homepage)) {
            throw new \InvalidArgumentException('non-nullable homepage cannot be null');
        }
        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets imdb_id
     *
     * @return string|null
     */
    public function getImdbId()
    {
        return $this->container['imdb_id'];
    }

    /**
     * Sets imdb_id
     *
     * @param string|null $imdb_id imdb_id
     *
     * @return self
     */
    public function setImdbId($imdb_id)
    {
        if (is_null($imdb_id)) {
            throw new \InvalidArgumentException('non-nullable imdb_id cannot be null');
        }
        $this->container['imdb_id'] = $imdb_id;

        return $this;
    }

    /**
     * Gets original_language
     *
     * @return string|null
     */
    public function getOriginalLanguage()
    {
        return $this->container['original_language'];
    }

    /**
     * Sets original_language
     *
     * @param string|null $original_language original_language
     *
     * @return self
     */
    public function setOriginalLanguage($original_language)
    {
        if (is_null($original_language)) {
            throw new \InvalidArgumentException('non-nullable original_language cannot be null');
        }
        $this->container['original_language'] = $original_language;

        return $this;
    }

    /**
     * Gets original_title
     *
     * @return string|null
     */
    public function getOriginalTitle()
    {
        return $this->container['original_title'];
    }

    /**
     * Sets original_title
     *
     * @param string|null $original_title original_title
     *
     * @return self
     */
    public function setOriginalTitle($original_title)
    {
        if (is_null($original_title)) {
            throw new \InvalidArgumentException('non-nullable original_title cannot be null');
        }
        $this->container['original_title'] = $original_title;

        return $this;
    }

    /**
     * Gets overview
     *
     * @return string|null
     */
    public function getOverview()
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param string|null $overview overview
     *
     * @return self
     */
    public function setOverview($overview)
    {
        if (is_null($overview)) {
            throw new \InvalidArgumentException('non-nullable overview cannot be null');
        }
        $this->container['overview'] = $overview;

        return $this;
    }

    /**
     * Gets popularity
     *
     * @return float|null
     */
    public function getPopularity()
    {
        return $this->container['popularity'];
    }

    /**
     * Sets popularity
     *
     * @param float|null $popularity popularity
     *
     * @return self
     */
    public function setPopularity($popularity)
    {
        if (is_null($popularity)) {
            throw new \InvalidArgumentException('non-nullable popularity cannot be null');
        }
        $this->container['popularity'] = $popularity;

        return $this;
    }

    /**
     * Gets poster_path
     *
     * @return string|null
     */
    public function getPosterPath()
    {
        return $this->container['poster_path'];
    }

    /**
     * Sets poster_path
     *
     * @param string|null $poster_path poster_path
     *
     * @return self
     */
    public function setPosterPath($poster_path)
    {
        if (is_null($poster_path)) {
            throw new \InvalidArgumentException('non-nullable poster_path cannot be null');
        }
        $this->container['poster_path'] = $poster_path;

        return $this;
    }

    /**
     * Gets production_companies
     *
     * @return \App\TmdbApi\Model\MovieDetails200ResponseProductionCompaniesInner[]|null
     */
    public function getProductionCompanies()
    {
        return $this->container['production_companies'];
    }

    /**
     * Sets production_companies
     *
     * @param \App\TmdbApi\Model\MovieDetails200ResponseProductionCompaniesInner[]|null $production_companies production_companies
     *
     * @return self
     */
    public function setProductionCompanies($production_companies)
    {
        if (is_null($production_companies)) {
            throw new \InvalidArgumentException('non-nullable production_companies cannot be null');
        }
        $this->container['production_companies'] = $production_companies;

        return $this;
    }

    /**
     * Gets production_countries
     *
     * @return \App\TmdbApi\Model\MovieDetails200ResponseProductionCountriesInner[]|null
     */
    public function getProductionCountries()
    {
        return $this->container['production_countries'];
    }

    /**
     * Sets production_countries
     *
     * @param \App\TmdbApi\Model\MovieDetails200ResponseProductionCountriesInner[]|null $production_countries production_countries
     *
     * @return self
     */
    public function setProductionCountries($production_countries)
    {
        if (is_null($production_countries)) {
            throw new \InvalidArgumentException('non-nullable production_countries cannot be null');
        }
        $this->container['production_countries'] = $production_countries;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return string|null
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param string|null $release_date release_date
     *
     * @return self
     */
    public function setReleaseDate($release_date)
    {
        if (is_null($release_date)) {
            throw new \InvalidArgumentException('non-nullable release_date cannot be null');
        }
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets revenue
     *
     * @return int|null
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param int|null $revenue revenue
     *
     * @return self
     */
    public function setRevenue($revenue)
    {
        if (is_null($revenue)) {
            throw new \InvalidArgumentException('non-nullable revenue cannot be null');
        }
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets runtime
     *
     * @return int|null
     */
    public function getRuntime()
    {
        return $this->container['runtime'];
    }

    /**
     * Sets runtime
     *
     * @param int|null $runtime runtime
     *
     * @return self
     */
    public function setRuntime($runtime)
    {
        if (is_null($runtime)) {
            throw new \InvalidArgumentException('non-nullable runtime cannot be null');
        }
        $this->container['runtime'] = $runtime;

        return $this;
    }

    /**
     * Gets spoken_languages
     *
     * @return \App\TmdbApi\Model\MovieDetails200ResponseSpokenLanguagesInner[]|null
     */
    public function getSpokenLanguages()
    {
        return $this->container['spoken_languages'];
    }

    /**
     * Sets spoken_languages
     *
     * @param \App\TmdbApi\Model\MovieDetails200ResponseSpokenLanguagesInner[]|null $spoken_languages spoken_languages
     *
     * @return self
     */
    public function setSpokenLanguages($spoken_languages)
    {
        if (is_null($spoken_languages)) {
            throw new \InvalidArgumentException('non-nullable spoken_languages cannot be null');
        }
        $this->container['spoken_languages'] = $spoken_languages;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tagline
     *
     * @return string|null
     */
    public function getTagline()
    {
        return $this->container['tagline'];
    }

    /**
     * Sets tagline
     *
     * @param string|null $tagline tagline
     *
     * @return self
     */
    public function setTagline($tagline)
    {
        if (is_null($tagline)) {
            throw new \InvalidArgumentException('non-nullable tagline cannot be null');
        }
        $this->container['tagline'] = $tagline;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets video
     *
     * @return bool|null
     */
    public function getVideo()
    {
        return $this->container['video'];
    }

    /**
     * Sets video
     *
     * @param bool|null $video video
     *
     * @return self
     */
    public function setVideo($video)
    {
        if (is_null($video)) {
            throw new \InvalidArgumentException('non-nullable video cannot be null');
        }
        $this->container['video'] = $video;

        return $this;
    }

    /**
     * Gets vote_average
     *
     * @return float|null
     */
    public function getVoteAverage()
    {
        return $this->container['vote_average'];
    }

    /**
     * Sets vote_average
     *
     * @param float|null $vote_average vote_average
     *
     * @return self
     */
    public function setVoteAverage($vote_average)
    {
        if (is_null($vote_average)) {
            throw new \InvalidArgumentException('non-nullable vote_average cannot be null');
        }
        $this->container['vote_average'] = $vote_average;

        return $this;
    }

    /**
     * Gets vote_count
     *
     * @return int|null
     */
    public function getVoteCount()
    {
        return $this->container['vote_count'];
    }

    /**
     * Sets vote_count
     *
     * @param int|null $vote_count vote_count
     *
     * @return self
     */
    public function setVoteCount($vote_count)
    {
        if (is_null($vote_count)) {
            throw new \InvalidArgumentException('non-nullable vote_count cannot be null');
        }
        $this->container['vote_count'] = $vote_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


