<?php
/**
 * TvSeasonDetails200ResponseEpisodesInnerGuestStarsInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  App\TmdbApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TMDB API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace App\TmdbApi\Model;

use \ArrayAccess;
use \App\TmdbApi\ObjectSerializer;

/**
 * TvSeasonDetails200ResponseEpisodesInnerGuestStarsInner Class Doc Comment
 *
 * @category Class
 * @package  App\TmdbApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TvSeasonDetails200ResponseEpisodesInnerGuestStarsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tv_season_details_200_response_episodes_inner_guest_stars_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'character' => 'string',
        'credit_id' => 'string',
        'order' => 'int',
        'adult' => 'bool',
        'gender' => 'int',
        'id' => 'int',
        'known_for_department' => 'string',
        'name' => 'string',
        'original_name' => 'string',
        'popularity' => 'float',
        'profile_path' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'character' => null,
        'credit_id' => null,
        'order' => null,
        'adult' => null,
        'gender' => null,
        'id' => null,
        'known_for_department' => null,
        'name' => null,
        'original_name' => null,
        'popularity' => null,
        'profile_path' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'character' => false,
        'credit_id' => false,
        'order' => false,
        'adult' => false,
        'gender' => false,
        'id' => false,
        'known_for_department' => false,
        'name' => false,
        'original_name' => false,
        'popularity' => false,
        'profile_path' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'character' => 'character',
        'credit_id' => 'credit_id',
        'order' => 'order',
        'adult' => 'adult',
        'gender' => 'gender',
        'id' => 'id',
        'known_for_department' => 'known_for_department',
        'name' => 'name',
        'original_name' => 'original_name',
        'popularity' => 'popularity',
        'profile_path' => 'profile_path'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'character' => 'setCharacter',
        'credit_id' => 'setCreditId',
        'order' => 'setOrder',
        'adult' => 'setAdult',
        'gender' => 'setGender',
        'id' => 'setId',
        'known_for_department' => 'setKnownForDepartment',
        'name' => 'setName',
        'original_name' => 'setOriginalName',
        'popularity' => 'setPopularity',
        'profile_path' => 'setProfilePath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'character' => 'getCharacter',
        'credit_id' => 'getCreditId',
        'order' => 'getOrder',
        'adult' => 'getAdult',
        'gender' => 'getGender',
        'id' => 'getId',
        'known_for_department' => 'getKnownForDepartment',
        'name' => 'getName',
        'original_name' => 'getOriginalName',
        'popularity' => 'getPopularity',
        'profile_path' => 'getProfilePath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('character', $data ?? [], null);
        $this->setIfExists('credit_id', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], 0);
        $this->setIfExists('adult', $data ?? [], true);
        $this->setIfExists('gender', $data ?? [], 0);
        $this->setIfExists('id', $data ?? [], 0);
        $this->setIfExists('known_for_department', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('original_name', $data ?? [], null);
        $this->setIfExists('popularity', $data ?? [], 0);
        $this->setIfExists('profile_path', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets character
     *
     * @return string|null
     */
    public function getCharacter()
    {
        return $this->container['character'];
    }

    /**
     * Sets character
     *
     * @param string|null $character character
     *
     * @return self
     */
    public function setCharacter($character)
    {
        if (is_null($character)) {
            throw new \InvalidArgumentException('non-nullable character cannot be null');
        }
        $this->container['character'] = $character;

        return $this;
    }

    /**
     * Gets credit_id
     *
     * @return string|null
     */
    public function getCreditId()
    {
        return $this->container['credit_id'];
    }

    /**
     * Sets credit_id
     *
     * @param string|null $credit_id credit_id
     *
     * @return self
     */
    public function setCreditId($credit_id)
    {
        if (is_null($credit_id)) {
            throw new \InvalidArgumentException('non-nullable credit_id cannot be null');
        }
        $this->container['credit_id'] = $credit_id;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets adult
     *
     * @return bool|null
     */
    public function getAdult()
    {
        return $this->container['adult'];
    }

    /**
     * Sets adult
     *
     * @param bool|null $adult adult
     *
     * @return self
     */
    public function setAdult($adult)
    {
        if (is_null($adult)) {
            throw new \InvalidArgumentException('non-nullable adult cannot be null');
        }
        $this->container['adult'] = $adult;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return int|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param int|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets known_for_department
     *
     * @return string|null
     */
    public function getKnownForDepartment()
    {
        return $this->container['known_for_department'];
    }

    /**
     * Sets known_for_department
     *
     * @param string|null $known_for_department known_for_department
     *
     * @return self
     */
    public function setKnownForDepartment($known_for_department)
    {
        if (is_null($known_for_department)) {
            throw new \InvalidArgumentException('non-nullable known_for_department cannot be null');
        }
        $this->container['known_for_department'] = $known_for_department;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets original_name
     *
     * @return string|null
     */
    public function getOriginalName()
    {
        return $this->container['original_name'];
    }

    /**
     * Sets original_name
     *
     * @param string|null $original_name original_name
     *
     * @return self
     */
    public function setOriginalName($original_name)
    {
        if (is_null($original_name)) {
            throw new \InvalidArgumentException('non-nullable original_name cannot be null');
        }
        $this->container['original_name'] = $original_name;

        return $this;
    }

    /**
     * Gets popularity
     *
     * @return float|null
     */
    public function getPopularity()
    {
        return $this->container['popularity'];
    }

    /**
     * Sets popularity
     *
     * @param float|null $popularity popularity
     *
     * @return self
     */
    public function setPopularity($popularity)
    {
        if (is_null($popularity)) {
            throw new \InvalidArgumentException('non-nullable popularity cannot be null');
        }
        $this->container['popularity'] = $popularity;

        return $this;
    }

    /**
     * Gets profile_path
     *
     * @return string|null
     */
    public function getProfilePath()
    {
        return $this->container['profile_path'];
    }

    /**
     * Sets profile_path
     *
     * @param string|null $profile_path profile_path
     *
     * @return self
     */
    public function setProfilePath($profile_path)
    {
        if (is_null($profile_path)) {
            throw new \InvalidArgumentException('non-nullable profile_path cannot be null');
        }
        $this->container['profile_path'] = $profile_path;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


